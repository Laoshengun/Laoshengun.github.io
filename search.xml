<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ajax笔记</title>
      <link href="/2020/03/16/ajaxnotes01/"/>
      <url>/2020/03/16/ajaxnotes01/</url>
      
        <content type="html"><![CDATA[<h2 id="Ajax初步了解"><a href="#Ajax初步了解" class="headerlink" title="Ajax初步了解"></a>Ajax初步了解</h2><h3 id="1-Ajax-对于前端开发的改变"><a href="#1-Ajax-对于前端开发的改变" class="headerlink" title="1.Ajax 对于前端开发的改变"></a>1.Ajax 对于前端开发的改变</h3><p>在Ajax之前，如果需要更新页面内容，必须重新加载整个页面，用户体验不好</p><p>Ajax诞生之后，页面可以在不重新加载整个页面的情况下进行进行局部刷新，进行创建动态网页</p><p><strong>Ajax的优点</strong></p><ol><li>页面无刷新更新</li><li>使用异步方式与服务器通信</li><li>可以将一些服务器工作转移到客户端，利用客户端资源来处理，减轻服务器和带宽的压力，节约空间和带宽租用成本</li><li>技术标准化，浏览器广泛支持，不需要下载插件</li><li>使因特网应用程序更小更快更友好</li></ol><p><strong>Ajax的缺点</strong></p><ol><li>不支持浏览器back返回按钮</li><li>有安全问题，暴露了与服务器交互的细节</li><li>对搜索引擎不友好</li><li>破坏了程序的异常机制</li><li>不容易调试</li></ol><h3 id="2-同源策略"><a href="#2-同源策略" class="headerlink" title="2.同源策略"></a>2.同源策略</h3><p>同源策略是一种安全协议，是客户端脚本中重要的安全度量标准，指一段脚本只能读取同一来源的窗口和文档的属性</p><p><strong>同源</strong>：指的是URL地址中的<strong>协议</strong>、<strong>域名</strong>、<strong>端口</strong>三者都相同</p><p><strong>同源策略的作用</strong></p><p>为了数据的安全性，若没有同源策略的限制，那么黑客就可以在他的页面上任意请求你的后端数据，造成数据库内容被盗取，隐私数据泄露</p><h2 id="Ajax的核心技术（XMLHttpRequest）"><a href="#Ajax的核心技术（XMLHttpRequest）" class="headerlink" title="Ajax的核心技术（XMLHttpRequest）"></a>Ajax的核心技术（XMLHttpRequest）</h2><h3 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h3><p>Ajax 技术的核心是<code>XMLHttpRequest</code>类，它允许脚本异步调用 HTTP API</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实例化 XMLHttpRequest 类</span></code></pre><p>但在 IE7 之前的版本（IE5、IE6）并不支持<code>XMLHttpRequest()</code>，需要用<code>ActiveX</code>对象进行模拟</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所以可以直接用<code>XMLHttpRequest</code>的兼容写法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> window<span class="token punctuation">.</span>XMLHttpRequest <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">window<span class="token punctuation">.</span>XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="Ajax的请求进程"><a href="#Ajax的请求进程" class="headerlink" title="Ajax的请求进程"></a>Ajax的请求进程</h3><h4 id="open方法"><a href="#open方法" class="headerlink" title="open方法"></a>open方法</h4><p>创建XMLHttpRequest 对象之后，发起HTTP请求的下一步是调用XMLHttpRequest 对象的 open 方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"/statics/demosource/demo_get_json.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>xhr.open(method, url, async)</code></p><p><strong>method：</strong></p><ul><li>第一个参数用于指定 HTTP 请求的方法，不区分大小写</li><li>该参数可取的值包括：”GET”、”POST”、”HEAD”、”PUT”、”OPTIONS”、”DELETE”</li></ul><p><strong>url：</strong></p><ul><li>第二个参数用于指定 HTTP 请求的 URL 地址，可以是 绝对值 或 相对值</li><li>绝对 URL ：需要满足”同源策略”</li><li>相对 URL ：相对于文档的URL</li></ul><p><strong>async：</strong></p><ul><li>第三个参数是可选的，可用布尔值指定脚本是否以异步的方式调用此次Ajax请求</li><li>该参数默认为true，表示异步调用此次Ajax请求，不阻塞后续脚本的执行</li></ul><blockquote><p><strong>open()</strong> 方法其实还有第四第五个参数，分别是用于HTTP请求访问认证的用户名和密码，使用它们需要在服务器做相应的配置，较为少用</p></blockquote><h4 id="setRequestHeader-设置请求头"><a href="#setRequestHeader-设置请求头" class="headerlink" title="setRequestHeader 设置请求头"></a>setRequestHeader 设置请求头</h4><p>如果你的<strong>HTTP</strong>请求需要设置请求头，那么下个步骤就是使用<strong>setRequestHead</strong>设置请求头</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token string">"/statics/demosource/demo_post_json.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在open方法之后设置请求头</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-from-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>xhr.setRequestHeader(name,value)</code></p><ul><li><strong>name</strong>：请求头名称；</li><li><strong>value</strong>：请求头的值；</li></ul><h4 id="send发送请求主体"><a href="#send发送请求主体" class="headerlink" title="send发送请求主体"></a>send发送请求主体</h4><p>使用<strong>send</strong>方法，指定可选的请求主体、并向服务器发送它</p><p><code>xhr.send(null);</code></p><ul><li>由于<strong>GET</strong>请求绝对没有请求主体，所以在调用 <strong>send</strong> 方法时可以传递 <strong>null</strong> 或省略这个参数</li></ul><p><code>xhr.send(msg);</code></p><ul><li><strong>POST</strong> 请求通常都拥有请求主体，可在 <strong>send</strong> 方法中指定它</li><li><strong>POST</strong> 请求的请求主体，应该匹配 <strong>setRequestHeader</strong> 方法所指定的 <strong>“Content-Type”</strong></li></ul><h3 id="Ajax取得响应"><a href="#Ajax取得响应" class="headerlink" title="Ajax取得响应"></a>Ajax取得响应</h3><h4 id="readyState属性"><a href="#readyState属性" class="headerlink" title="readyState属性"></a>readyState属性</h4><p><strong>readyState</strong>属性是一个整数，它的值代表了不同的HTTP请求状态</p><ul><li>0：初始值，表示请求未初始化，open 方法尚未调用</li><li>1：启动请求，open方法已经调用，但尚未调用send方法</li><li>2：请求发送，已经调用send方法，但尚未接收到响应</li><li>3：接收响应，已经接收到部分响应数据，主要是响应头</li><li>4：HTTP响应完成，已经接收到全部响应数据，并且可以在客户端使用</li></ul><blockquote><p>每次<strong>readyState</strong>属性值的改变都会触发<strong>readystatechange</strong>事件，但只有<strong>readyState</strong>属性值为<strong>4</strong>时才是我们所关心的状态，因为只有这个状态才表示<strong>HTTP</strong>的响应准备就绪，可以真正意义上的结合服务器所响应的数据来实现我们的业务需求</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//HTTP响应完成</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="status属性"><a href="#status属性" class="headerlink" title="status属性"></a>status属性</h4><p>status属性会以数字的形式保存服务器响应的HTTP状态码</p><p>HTTP状态码：</p><ul><li><p><strong>1xx</strong>：临时响应</p></li><li><p><strong>2xx</strong>：成功</p></li><li><p><strong>3xx</strong>：重定向</p></li><li><p><strong>4xx</strong>：请求错误</p></li><li><p><strong>5xx</strong>：服务器错误</p><p>2开头的状态码和304可以获取到HTTP响应数据，304是对客户端可读取缓存的一种响应</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span><span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取到响应数据，可执行一些请求成功的回调函数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>；</code></pre><h4 id="response-Test-属性"><a href="#response-Test-属性" class="headerlink" title="response Test 属性"></a>response Test 属性</h4><p><strong>responseTest</strong> 属性以字符串的形式存储了响应主体</p><p>响应<strong>HTML</strong>文本</p><pre class=" language-javascript"><code class="language-javascript">oView<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseTest<span class="token punctuation">;</span></code></pre><p>响应<strong>JSON</strong>数据</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> res <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseTest<span class="token punctuation">)</span><span class="token punctuation">;</span>oTime<span class="token punctuation">.</span>innerTest <span class="token operator">=</span> res<span class="token punctuation">.</span>date<span class="token punctuation">;</span></code></pre><p><strong>responseType</strong>指定响应主体的数据格式为<strong>json</strong></p><pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span>responseType <span class="token operator">=</span> <span class="token string">"json"</span><span class="token punctuation">;</span></code></pre><p><strong>response</strong>的使用</p><pre class=" language-javascript"><code class="language-javascript">oTime<span class="token punctuation">.</span>innerText <span class="token operator">=</span> xhr<span class="token punctuation">.</span>response<span class="token punctuation">.</span>date<span class="token punctuation">;</span></code></pre><h4 id="查询HTTP响应头"><a href="#查询HTTP响应头" class="headerlink" title="查询HTTP响应头"></a>查询HTTP响应头</h4><p>可以通过<strong>getAllResponseHeaders</strong> 和<strong>getResponseHeader</strong>方法查询响应头信息</p><pre class=" language-javascript"><code class="language-javascript">oView<span class="token punctuation">.</span>innerText <span class="token operator">=</span> xhr<span class="token punctuation">.</span><span class="token function">getAllReponseHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取所有可查询的响应头信息</span></code></pre><p><strong>getResponseHeader</strong> 方法用于查询单一响应头信息，需要传入一个头名称参数</p><p><code>getResponseHeader(headerName)</code></p><h4 id="abort-中止请求"><a href="#abort-中止请求" class="headerlink" title="abort 中止请求"></a>abort 中止请求</h4><p>如果HTTP 请求的时间超出预期，可以调用XMLHttpRequest 对象上的abort 方法中止HTTP请求</p><pre class=" language-javascript"><code class="language-javascript">timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    xhr<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2秒后中止此次GET请求</span></code></pre><h2 id="前后端数据交互"><a href="#前后端数据交互" class="headerlink" title="前后端数据交互"></a>前后端数据交互</h2><h3 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h3><p>GET请求一般用于信息获取（传递数据给后台）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// GET请求的后端接口</span><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取用户输入的表单数据</span><span class="token keyword">var</span> value1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>    value2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将需要传递的参数拼接为 "名称=值" 对的形式</span><span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token string">"name1="</span> <span class="token operator">+</span> value1 <span class="token operator">+</span> <span class="token string">"&amp;name2="</span> <span class="token operator">+</span> value2<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在query前面添加个 "?"，再拼接后端接口，表示URL的查询参数开始</span><span class="token keyword">var</span> queryURL <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span>query<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发起GET请求：使用拼接好的 queryURL</span><span class="token function">ajaxGet</span><span class="token punctuation">(</span>queryURL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ajaxGet() 是对 Ajax 的 GET 请求稍微封装了一下，目的是为了更好的展示GET传递参数的细节</span></code></pre><p><strong>为了解决GET请求缓存问题</strong></p><p>实时改变 GET 请求的 URL ，只要 URL 不同，就不会取到浏览器的缓存结果</p><p>在 URL 末尾添加时间戳参数，由于时间戳可以精确到毫秒，从而保证实时改变URL</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 在请求参数的最后附加时间戳参数 t</span><span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token string">"name1="</span> <span class="token operator">+</span> value1 <span class="token operator">+</span> <span class="token string">"&amp;name2="</span> <span class="token operator">+</span> value2 <span class="token operator">+</span> <span class="token string">"&amp;t="</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> queryURL <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"?"</span> <span class="token operator">+</span>query<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ajax_get为自己封装的请求对象，不是固定用法</span><span class="token function">ajax_get</span><span class="token punctuation">(</span>queryURL<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>POST请求一般用于修改服务器上的资源，它需要发送一个请求主体，客户端传递给服务器的数据就包含在这个请求主体</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 获取用户输入的表单数据</span><span class="token keyword">var</span> value1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>    value2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将数据拼接为 名/值 对 的形式</span><span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token string">"name1="</span> <span class="token operator">+</span> value1 <span class="token operator">+</span> <span class="token string">"&amp;name2="</span> <span class="token operator">+</span> value2<span class="token punctuation">;</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 事件处理程序</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指定 POST 请求</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置请求主体的编码方法</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-from-urlencode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 发送请求主体（数据）</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>JSON 编码的 POST 请求</strong></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 获取用户输入的表单数据</span><span class="token keyword">var</span> value1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">,</span>    value2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将数据转换为 Javascript 对象</span><span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>    name1 <span class="token punctuation">:</span> value1<span class="token punctuation">,</span>    name2 <span class="token punctuation">:</span> value2<span class="token punctuation">}</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 事件处理程序</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 指定 POST 请求</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 设置请求主体的编码方法</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 编码请求主体并发送(对请求主体进行序列化)</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="GET请求-与-POST请求对比"><a href="#GET请求-与-POST请求对比" class="headerlink" title="GET请求 与 POST请求对比"></a>GET请求 与 POST请求对比</h3><p><strong>GET 请求：</strong></p><ul><li>一般用于信息获取：通过发送一个请求来取得服务器上的资源</li><li>数据包含在URL地址中</li><li>数据量受URL的长度限制</li><li>不安全：浏览器的URL可以直接看到，明文传输</li><li>GET 请求会被缓存</li><li>GET 没有请求主体，请求速度相对较快</li></ul><p><strong>POST 请求：</strong></p><ul><li>一般用于修改服务器上的资源：向指定资源提交数据。后端处理请求后往往会导致服务器建立新的资源或修改已有资源</li><li>数据包含在请求主体中</li><li>没有数据量限制，可在服务器的配置里进行限制</li><li>只能是比GET安全，实际上也是不安全的：可通过开发者工具或者抓包看到，明文传输</li><li>POST 请求不会缓存</li><li>POST 相对稳定、可靠：可发送包含未知字符的内容</li></ul><blockquote><p>HTTP 协议里并没有限制 GET 和 POST 的长度，GET 的最大长度限制是因为浏览器和WEB 服务器对URL的长度限制，不同的浏览器和 WEB 服务器限制的最大长度不一样，他们所限制的是整个 URL 的长度，而不仅仅是查询参数的数据长度</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2020/03/07/linuxcommoncommands/"/>
      <url>/2020/03/07/linuxcommoncommands/</url>
      
        <content type="html"><![CDATA[<h1 id="目录操作的常用命令"><a href="#目录操作的常用命令" class="headerlink" title="目录操作的常用命令"></a>目录操作的常用命令</h1><h2 id="ls-命令"><a href="#ls-命令" class="headerlink" title="ls 命令"></a>ls 命令</h2><p>通过<strong>ls</strong>命令可以查看Linux文件夹中包含的文件及其文件权限(包括目录，文件夹，文件权限)，目录信息等等</p><p><code>ls [选项] [目录/文件]</code></p><p><strong>选项：</strong></p><ul><li><strong>-a：</strong>列出目录所有文件，包含以 <strong>.</strong> 开始的隐藏文件</li><li><strong>-A：</strong>列出除 <strong>.</strong> 及 <strong>..</strong> 的其他文件</li><li><strong>-r：</strong>反序排列</li><li><strong>-t：</strong>以文件修改时间排列</li><li><strong>-s：</strong>以文件大小排列</li><li><strong>-h：</strong>以易读大小显示</li><li><strong>-l：</strong>除了文件名之外，还将文件的权限，所有者，文件大小等信息详细列出来</li></ul><h2 id="cd-命令"><a href="#cd-命令" class="headerlink" title="cd 命令"></a>cd 命令</h2><p><strong>cd</strong> 命令用于实现目录跳转</p><p><code>cd [目录名]</code></p><p>进入根目录：<code>cd /</code></p><p>进入 “home” 目录：<code>cd ~</code></p><p>把上个命令的参数作为cd参数使用：<code>cd !$</code></p><p>进入上一次工作路径：<code>cd -</code></p><p>返回上一级目录：<code>cd ..</code></p><h2 id="pwd-命令"><a href="#pwd-命令" class="headerlink" title="pwd 命令"></a>pwd 命令</h2><p><strong>pwd</strong> 命令用于查看当前工作目录路径</p><p>查看当前路径：<code>pwd</code></p><p>查看当前目录的绝对路径<strong>（注意大写P）</strong>：<code>pwd -P</code></p><h2 id="mkdir-命令"><a href="#mkdir-命令" class="headerlink" title="mkdir 命令"></a>mkdir 命令</h2><p><strong>mkdir</strong> 命令用于创建文件夹</p><p><code>mkdir [选项] [参数]</code></p><p><strong>选项：</strong></p><ul><li><strong>-m：</strong>对新建目录设置存取权限，也可以用 chomd 命令设置</li><li><strong>-p：</strong>可以是一个路径名称。此时若路径中的某些目录尚不存在，加上此选项后，系统将自动建立号那些尚不存在的目录，即一次可以建立多个目录</li></ul><h2 id="rm-命令"><a href="#rm-命令" class="headerlink" title="rm 命令"></a>rm 命令</h2><p>删除一个目录中的一个或多个文件或目录</p><p>如果使用 <strong>rm</strong> 来删除文件，通常仍可以将文件恢复原状</p><p><code>rm [选项] [文件]</code></p><p><strong>选项：</strong></p><ul><li><strong>-d：</strong>删除可能仍有数据的目录（只限超级用户）</li><li><strong>-f：</strong>略过不存在的文件，不显示任何信息</li><li><strong>-r：</strong>同时删除该目录下的所有目录层</li><li><strong>-v：</strong>详细显示进行的步骤</li><li><strong>-i：</strong>进行任何删除操作前必须先确认，同时删除多个文件时每个文件都会提醒确认操作</li><li><strong>-l：</strong>同时删除多个文件（大于3个）时，只提醒一次</li></ul><h2 id="rmdir命令"><a href="#rmdir命令" class="headerlink" title="rmdir命令"></a>rmdir命令</h2><p>从一个目录中删除一个或多个子目录项，删除某目录时也必须具有对其父目录的写权限</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于短路原则</title>
      <link href="/2020/03/06/shortcircuitprinciple/"/>
      <url>/2020/03/06/shortcircuitprinciple/</url>
      
        <content type="html"><![CDATA[<h2 id="短路原则介绍"><a href="#短路原则介绍" class="headerlink" title="短路原则介绍"></a>短路原则介绍</h2><p><strong>短路原则</strong>指的是 <strong>&amp;&amp;</strong> 运算和 <strong>||</strong> 运算的短路特性</p><p>假设A &amp;&amp; B</p><p>(只有 A 和 B 都为真，表达式才为真)</p><p>如果A为真，那么会继续判断B的真假</p><p>如果 A 为假，那么无论 B 的真假，整个表达式都为假，所以不会继续判断 B 的真假，如果 B 为计算式或函数式，那么将不会执行 B，这就是短路原则</p><p><strong>同理</strong></p><p>假设A || B</p><p>(只有 A 和 B 都为假，表达式才为假)</p><p>如果 A 为假，会继续执行B的判断</p><p>如果 A 为真，那么 B 的判断就无关紧要了，所以不会进行 B 的执行和判断</p><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><p><strong>举个例子</strong></p><p>a = 1; b = 0; c = 3;</p><p>(a += c) || (b += c)</p><p>输出结果：a = 4, b = 0, c = 3</p><p>因为a为真，所以表达式一定为真，不再执行后面的判断</p><p>b &amp;&amp; (a += c)</p><p>输出结果：a = 1，b = 0，c = 3</p><p>因为b为假，所以表达式一定为假，不再执行后面的判断</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>我看到 Leetcode 上有这么一道题 <a href="https://leetcode-cn.com/problems/qiu-12n-lcof/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/qiu-12n-lcof/</a></p><p>题目：</p><p>求 <code>1+2+...+n</code> ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p><p>解答：(以C语言为例)</p><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    n <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这就用到了 &amp;&amp; 运算的短路原则</p><p>当 n 不为零时，n为真，则会执行 <code>(n += sumNums(n-1))</code> </p><p>当 n = 0 时，将不再执行后面的代码</p><p>（真奇妙，我自己肯定想不出来，淦）</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统目录</title>
      <link href="/2020/03/06/linuxsystemcatalog/"/>
      <url>/2020/03/06/linuxsystemcatalog/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux系统目录"><a href="#Linux系统目录" class="headerlink" title="Linux系统目录"></a>Linux系统目录</h2><ul><li><strong>/bin：</strong>该目录存放着最经常使用的命令</li><li><strong>/boot：</strong>存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件</li><li><strong>/dev：</strong>该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的</li><li><strong>/ect：</strong>该目录用来存放所有的系统管理所需要的配置文件和子目录</li><li><strong>/home：</strong>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的</li><li><strong>/lib：</strong>该目录存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库</li><li><strong>/lost+found：</strong>该目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件</li><li><strong>/media：</strong>Linux系统会自动识别一些设备，例如U盘，光驱等等，当识别后，Linux会把识别的设备挂载到这个目录下</li><li><strong>/mnt：</strong>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了</li><li><strong>/opt：</strong>这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的</li><li><strong>/proc：</strong>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息</li><li><strong>/root：</strong>该目录为系统管理员，也称作超级权限者的用户主目录</li><li><strong>/sbin：</strong>这里存放的是系统管理员使用的系统管理程序</li><li><strong>/selinux：</strong>这个目录是Redhat/CentOS所持有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的</li><li><strong>/srv：</strong>该目录存放一些服务启动之后需要提取的数据</li><li><strong>/sys：</strong>该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建</li><li><strong>/tmp：</strong>这个目录是用来存放一些临时文件的</li><li><strong>/usr (重要文件)：</strong>用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录</li><li><strong>/usr/bin：</strong>系统用户使用的应用程序</li><li><strong>/usr/sbin：</strong>超级用户使用的比较高级的管理程序和系统守护程序</li><li><strong>/usr/src：</strong>内核源代码默认的放置目录</li><li><strong>/var：</strong>该目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件</li><li><strong>/run：</strong>这是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删除或清除。如果系统上有 /var/run 目录，应该让它指向 run</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>下列几个目录属于重要目录，日常操作Linux系统，在没了解对应操作并做系统备份时避免删除或者随意更改内部文件</p><ul><li><strong>/etc</strong>：系统中的配置文件，盲目更改可能会导致系统无法启动</li><li><strong>/bin，/sbin，/usr/bin，/usr/sbin：</strong>系统预设的执行文件的放置目录</li><li><strong>/var：</strong>大部分系统中运行的程序的日志文件都存储在该目录中</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记06(效果)</title>
      <link href="/2020/03/04/jquerynotes6/"/>
      <url>/2020/03/04/jquerynotes6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-显示-隐藏，淡入-淡出"><a href="#1-显示-隐藏，淡入-淡出" class="headerlink" title="1.显示/隐藏，淡入/淡出"></a>1.显示/隐藏，淡入/淡出</h2><h3 id="显示-隐藏"><a href="#显示-隐藏" class="headerlink" title="显示/隐藏"></a>显示/隐藏</h3><p><strong>hide()</strong> 和 <strong>show()</strong> 方法用于隐藏和显示所选元素</p><p><strong>toggle()</strong> 方法用于在隐藏和显示元素之间切换</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以为toggle方法传入一个1000毫秒的参数，以毫秒为单位指定动画速度</span></code></pre><h3 id="淡入-淡出"><a href="#淡入-淡出" class="headerlink" title="淡入/淡出"></a>淡入/淡出</h3><p><strong>fadeIn()</strong> 和<strong>fadeOut()</strong> 方法可以将一个元素淡入淡出显示</p><p><strong>fadeToggle()</strong> 方法可以在淡入淡出中切换</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fadeToggle</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 参数为动画速度</span></code></pre><h3 id="向上-向下滑动"><a href="#向上-向下滑动" class="headerlink" title="向上/向下滑动"></a>向上/向下滑动</h3><p><strong>slideUp()</strong> 和 <strong>slideDown()</strong> 方法用于在元素上创建滑动效果</p><p><strong>slideToggle()</strong> 方法可以在滑动效果之间切换</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slideToggle</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="2-动画"><a href="#2-动画" class="headerlink" title="2.动画"></a>2.动画</h2><p><strong>animate()</strong> 方法可以将动画设置为设定值或相对于当前的值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">animate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>width<span class="token punctuation">:</span> <span class="token string">'250px'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将div的width属性在1s内改变到250px，第一个参数是是CSS属性，第二个参数是动画速度</span></code></pre><p>多个CSS属性可以用逗号分隔</p><p>默认情况下，如果有多个<strong>animate()</strong> ，jQuery会有一个队列，逐个运行动画</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记05(事件)</title>
      <link href="/2020/03/03/jquerynotes5/"/>
      <url>/2020/03/03/jquerynotes5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-事件处理"><a href="#1-事件处理" class="headerlink" title="1.事件处理"></a>1.事件处理</h2><p>当所选元素发生事件时，jQuery可以执行处理函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token function">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当id="demo"的元素上发生点击事件时，显示当前日期</span></code></pre><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><ul><li><strong>click</strong>: 单击时发生</li><li><strong>dbclick</strong>: 双击元素时触发</li><li><strong>mouseenter</strong>: 当鼠标指针进入所愿元素时触发</li><li><strong>mouseleave</strong>: 当鼠标指针离开所选元素时触发</li><li><strong>mouseover</strong>: 当鼠标指针在所选元素上方悬停时触发</li></ul><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><ul><li><strong>keydown</strong>: 当按下键盘按键时会触发</li><li><strong>keyup</strong>: 当键盘按键被释放时会触发</li></ul><h3 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h3><ul><li><strong>submit</strong>: 提交表单时触发</li><li><strong>change</strong>: 当表单元素的值发生改变时触发</li><li><strong>focus</strong>: 当表单元素获得焦点时触发</li><li><strong>blur</strong>: 当表单元素失去焦点时触发</li></ul><h3 id="文件事件"><a href="#文件事件" class="headerlink" title="文件事件"></a>文件事件</h3><ul><li><strong>ready</strong>: 当DOM加载完成后触发</li><li><strong>resize</strong>: 当浏览器窗口大小改变时触发</li><li><strong>scroll</strong>: 当用户在指定的元素中滚动滚动条时触发</li></ul><p>可以用<strong>on()</strong> 方法将事件附加到所选元素</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click dbclick"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"clicked"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 第一个参数为事件名称，第二个参数是处理函数</span></code></pre><p>可以看到第一个参数可以有多个事件名称，中间用空格分隔开，也就是说可以将相同的函数绑定到多个事件中</p><p>也可以用<strong>off()</strong> 方法删除事件处理程序</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'I love jQuery'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>click<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// off()方法删除了click事件的事件处理程序</span></code></pre><h2 id="2-事件对象"><a href="#2-事件对象" class="headerlink" title="2.事件对象"></a>2.事件对象</h2><p>每个事件处理函数都可以接收一个事件对象，其中包含与该事件相关的属性和方法</p><ul><li><strong>pageX</strong>, <strong>pageY</strong> ：事件发生时相对于页面左上角的鼠标位置 (X和Y的坐标)</li><li><strong>type</strong>：键入事件的类型 (例如”点击”)</li><li><strong>which</strong>：哪个按钮或键被按下</li><li><strong>data</strong>：数据绑定事件是传入的任何数据</li><li><strong>target</strong>：定位发起事件的DOM元素</li><li><strong>preventDefault()</strong>：阻止事件的默认动作 (例如，在链接之后)</li><li><strong>stopPropagation()</strong>：停止冒泡到其他元素的事件</li></ul><p>例如：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>pageX<span class="token punctuation">)</span><span class="token punctuation">;</span>   event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 点击时阻止打开a标签的链接，并提醒鼠标的位置</span></code></pre><p>还可以用<strong>trigger()</strong> 方法以编程方式动态触发事件</p><p>例如，可以触发一个点击事件，而不需要用户实际点击一个元素</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"I love jQuery"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">triggle</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记04(DOM)</title>
      <link href="/2020/03/02/jquerynotes4/"/>
      <url>/2020/03/02/jquerynotes4/</url>
      
        <content type="html"><![CDATA[<h2 id="1-DOM遍历"><a href="#1-DOM遍历" class="headerlink" title="1.DOM遍历"></a>1.DOM遍历</h2><p><strong>parent()</strong> 方法可以返回所选HTML元素的直接父元素</p><p>例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> e <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>e<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"border"</span><span class="token punctuation">,</span> <span class="token string">"2px solid red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 选择了p元素的父元素div，并设置了一个红边框</span></code></pre><ul><li><strong>parents()</strong> 方法可以返回所选元素的所有父元素</li><li><strong>children()</strong> 方法可以返回所选元素的所有子元素</li><li><strong>siblings()</strong> 方法可以返回所选元素的所有兄弟(同级)元素</li><li><strong>next()</strong> 方法可以返回所选元素的下一个兄弟元素</li><li><strong>nextAll()</strong> 方法可以返回所选元素下面的所有兄弟元素</li><li><strong>prev()</strong> 方法可以返回所选元素的上一个兄弟元素</li><li><strong>prevAll()</strong> 方法可以返回所选元素上面的所有兄弟元素</li><li><strong>eq()</strong> 方法可以返回具有特定索引号的元素(多个同样的元素，索引号从0开始)</li></ul><h2 id="2-删除元素"><a href="#2-删除元素" class="headerlink" title="2.删除元素"></a>2.删除元素</h2><p><strong>remove()</strong> 方法可以从DOM中删除选定的HTML元素</p><p>例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Red<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>green</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Green<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>blue</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Blue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除索引号为1的P元素，即删除Green，第二个段落元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除所有p元素</span></code></pre><p><strong>empty()</strong> 方法可以删除所选元素的子元素</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除div元素的所有子元素</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记03(CSS)</title>
      <link href="/2020/03/01/jquerynotes3/"/>
      <url>/2020/03/01/jquerynotes3/</url>
      
        <content type="html"><![CDATA[<ol><li>addClass(), removeClass(), toggleClass()</li><li>css()</li><li>width(), height(), innerWidth(), innerHeight(), outerWidth(), outerHeight()</li></ol><h2 id="1-添加，删除class"><a href="#1-添加，删除class" class="headerlink" title="1.添加，删除class"></a>1.添加，删除class</h2><p><strong>addClass()</strong> 方法可以为选定的HTML元素添加一个或多个类</p><p>例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    i love jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.header</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span>x-large<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addClass</span><span class="token punctuation">(</span><span class="token string">"header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 为HTML的div元素添加了一个 class "header"</span></code></pre><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><strong>removeClass()</strong> 方法可以从所选HTML元素中删除一个或多个类名</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeClass</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 从div元素中删除了 class "red"</span></code></pre><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p><strong>toggleClass()</strong> 方法可以让所选HTML元素添加或者删除类，如果存在类则删除，如果不存在则添加</p><p>例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>i love jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>click<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.red</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toggleClass</span><span class="token punctuation">(</span><span class="token string">"red"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 点击button将会为p元素添加class "red"，再点击一遍将会删除class "red"</span></code></pre><h2 id="2-CSS属性"><a href="#2-CSS属性" class="headerlink" title="2.CSS属性"></a>2.CSS属性</h2><p><strong>css()</strong> 方法可以获取和设置css的属性值，同html() 方法类似</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取 &lt;p> 标签 background-color 属性值</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 将 background-color 属性值设置为 blue</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也可以用 “属性”: “值”对 来设置多个属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"color"</span><span class="token punctuation">:</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"font-size"</span><span class="token punctuation">:</span><span class="token string">"200%"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 同时设置了 color 和 font-size 两个属性</span></code></pre><h2 id="3-设置样式"><a href="#3-设置样式" class="headerlink" title="3.设置样式"></a>3.设置样式</h2><p>可以使用<strong>width()</strong> 和<strong>height()</strong> 方法来获取和设置HTML元素的宽度和高度</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">height</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将div的宽度和高度设置为100px</span></code></pre><p><strong>innerWidth()</strong> 和 <strong>innerHeight()</strong> 方法可以获取包括填充部分的尺寸</p><p><strong>outerWidth()</strong> 和 <strong>outerHeight()</strong> 方法可以获取和设置包括填充和边框部分的尺寸</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记02(HTML)</title>
      <link href="/2020/02/29/jquerynotes2/"/>
      <url>/2020/02/29/jquerynotes2/</url>
      
        <content type="html"><![CDATA[<ol><li>attr() </li><li>removeaAttr() </li><li>html() ，text()</li><li>val() </li><li>append()，prepend()，after()，before()</li></ol><h2 id="1-获取，设置属性值"><a href="#1-获取，设置属性值" class="headerlink" title="1.获取，设置属性值"></a>1.获取，设置属性值</h2><p><strong>attr()</strong> 方法用于获取属性的值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取&lt;a>标签的href属性</span></code></pre><p><strong>attr()</strong> 方法还可以通过第二个参数给属性设置一个值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token string">"https://www.jquery.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取&lt;a>标签的href属性，并通过第二个参数赋值</span></code></pre><h2 id="2-删除属性"><a href="#2-删除属性" class="headerlink" title="2.删除属性"></a>2.删除属性</h2><p><strong>removeAttr()</strong> 方法从HTML元素中删除属性</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAttr</span><span class="token punctuation">(</span><span class="token string">"border"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 删除&lt;table>标签的border属性</span></code></pre><h2 id="3-获取，设置HTML内容"><a href="#3-获取，设置HTML内容" class="headerlink" title="3.获取，设置HTML内容"></a>3.获取，设置HTML内容</h2><p><strong>html()</strong> 方法可以获取并设置所选html元素的内容，包括HTML标记</p><p>例如:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    jQuery is <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>fun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取&lt;p>标签里的内容包括标签，弹出 "jQuery is &lt;b>fun&lt;/b>"</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hmtl</span><span class="token punctuation">(</span><span class="token string">"hello &lt;b>world!&lt;/b>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将元素的内容设置为 "hello &lt;b>world!&lt;/b>"，可设置标签</span></code></pre><p><strong>text()</strong> 方法可以获取并设置HTML元素的文本内容，不包括HTML标记</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> val <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 弹出 "jQuery is fun"</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将元素的文本内容设置为 "hello world!"，不可设置标签</span></code></pre><h2 id="4-val-方法"><a href="#4-val-方法" class="headerlink" title="4.val() 方法"></a>4.val() 方法</h2><p><strong>val()</strong> 方法可以获取和设置表单字段的值</p><p>例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Tom<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取id为name的表单的值，弹出 "Tom"</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token string">"Jerry"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将id为name的表单的值，设置为 "Jerry"</span></code></pre><h2 id="5-添加内容"><a href="#5-添加内容" class="headerlink" title="5.添加内容"></a>5.添加内容</h2><p>以下方法在添加新内容的同时不会删除现有内容</p><ul><li><strong>append()</strong> 方法再所选元素的末尾插入内容</li><li><strong>prepend()</strong> 方法在所选元素的开头插入内容</li><li><strong>after()</strong> 方法在所选元素之前插入内容（可以添加HTML标签）</li><li><strong>before()</strong> 方法在所选元素之后插入内容（可以添加HTML标签）</li></ul><p>例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>before()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>    prepend()    a    append()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>after()<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery笔记01(概述)</title>
      <link href="/2020/02/28/jquerynotes1/"/>
      <url>/2020/02/28/jquerynotes1/</url>
      
        <content type="html"><![CDATA[<h2 id="1-jQuery是什么"><a href="#1-jQuery是什么" class="headerlink" title="1.jQuery是什么"></a>1.jQuery是什么</h2><p>一个JavaScript库</p><h2 id="2-jQuery的引入"><a href="#2-jQuery的引入" class="headerlink" title="2.jQuery的引入"></a>2.jQuery的引入</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>页面标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/2.2.4/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="3-文档就绪事件"><a href="#3-文档就绪事件" class="headerlink" title="3.文档就绪事件"></a>3.文档就绪事件</h2><p>等待HTML文档完全加载并准备就绪</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在这写jQuery代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="4-jQuery的基本语法"><a href="#4-jQuery的基本语法" class="headerlink" title="4.jQuery的基本语法"></a>4.jQuery的基本语法</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"selector"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>selector是选择器，action是执行的动作</p><h2 id="5-jQuery的常用选择器"><a href="#5-jQuery的常用选择器" class="headerlink" title="5.jQuery的常用选择器"></a>5.jQuery的常用选择器</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//所有&lt;div>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#test"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//id="test"的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".menu"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//class="menu"的所有元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div.menu"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 所有&lt;div>元素与class="menu"</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p:first"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第一个&lt;p>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h1, p"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 所有&lt;h1>和所有&lt;p>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div p"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 所有&lt;div>元素后代的&lt;p>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// DOM的所有元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"this"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//选取当前HTML元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p.intro"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//选取class为intro的&lt;p>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"p:first"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//选取第一个&lt;p>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul li:first"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//选取第一个&lt;ul>元素的第一个&lt;li>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"ul li:first-child"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//选取每个&lt;ul>元素的第一个&lt;li>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"[href]"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//选取带有href属性的元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a[target='_blank']"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//所有target属性等于"_blank"的&lt;a>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"a[target!='_blank']"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//选取所有target属性值不等于"_blank"的&lt;a>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">":button"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//选取所有type="button"的&lt;input>元素和&lt;button>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"tr:even"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//选取偶数位置的&lt;tr>元素</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"tr:odd"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//选取奇数位置的&lt;tr>元素</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Anki教程01</title>
      <link href="/2020/02/02/anki1/"/>
      <url>/2020/02/02/anki1/</url>
      
        <content type="html"><![CDATA[<h1 id="Anki的安装及使用"><a href="#Anki的安装及使用" class="headerlink" title="Anki的安装及使用"></a>Anki的安装及使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Anki-2-1-15-windows-64-exe"><a href="#Anki-2-1-15-windows-64-exe" class="headerlink" title="Anki-2.1.15-windows(64).exe"></a>Anki-2.1.15-windows(64).exe</h3><p>百度网盘：<a href="https://pan.baidu.com/s/1zTbNTx1Tde3ger9Rq2USjg" target="_blank" rel="noopener">https://pan.baidu.com/s/1zTbNTx1Tde3ger9Rq2USjg</a></p><p>提取码：ykfv</p><p>下载安装即可</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="1-创建记忆库"><a href="#1-创建记忆库" class="headerlink" title="1.创建记忆库"></a>1.创建记忆库</h3><p>点击界面下方的创建记忆库</p><p>输入你想创建的记忆库名称，点击ok完成</p><p><img src="http://qiniupic.laoshengun.cn/blog_Anki1_01.png" alt=""></p><h3 id="2-创建模板"><a href="#2-创建模板" class="headerlink" title="2.创建模板"></a>2.创建模板</h3><ol><li>点击左上方工具栏里的 ‘’工具’’ 下拉框</li><li>选择 ‘’管理笔记类型’’</li><li>点击 ‘’添加’’ ，在弹窗中选择 ‘’基础’’ 即可，点击ok，输入名称，完成</li></ol><p><img src="http://qiniupic.laoshengun.cn/blog_Anki1_02.png" alt=""></p><h3 id="3-编辑卡片"><a href="#3-编辑卡片" class="headerlink" title="3.编辑卡片"></a>3.编辑卡片</h3><p>点击笔记类型对话框右边的 ‘’卡片’’ ，可以对卡片进行编辑，如下图</p><p><img src="http://qiniupic.laoshengun.cn/blog_Anki1_03.png" alt=""></p><h3 id="4-添加字段"><a href="#4-添加字段" class="headerlink" title="4.添加字段"></a>4.添加字段</h3><p>点击笔记类型对话框右边的 ‘’字段’’ ，可以对字段进行操作</p><p>需要添加先前在卡片编辑中用到的字段</p><p>编辑完成后点击close即可</p><p><img src="http://qiniupic.laoshengun.cn/blog_Anki1_04.png" alt=""></p><h3 id="5-添加记忆卡"><a href="#5-添加记忆卡" class="headerlink" title="5.添加记忆卡"></a>5.添加记忆卡</h3><p>点击界面上方的 “添加”，即可添加记忆卡</p><p><img src="http://qiniupic.laoshengun.cn/blog_Anki1_05.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anki </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.两数相加</title>
      <link href="/2020/01/21/leetcode2/"/>
      <url>/2020/01/21/leetcode2/</url>
      
        <content type="html"><![CDATA[<h1 id="02-两数相加"><a href="#02-两数相加" class="headerlink" title="02.两数相加"></a>02.两数相加</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p><p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p><p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p>示例：</p><p>输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)<br>输出：7 -&gt; 0 -&gt; 8<br>原因：342 + 465 = 807</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers</a></p><h2 id="第一次提交（2ms）"><a href="#第一次提交（2ms）" class="headerlink" title="第一次提交（2ms）"></a>第一次提交（2ms）</h2><p>参照别人提供的算法</p><p>作者：guanpengchn<br>链接：<a href="https://leetcode-cn.com/problems/add-two-numbers/solution/hua-jie-suan-fa-2-liang-shu-xiang-jia-by-guanpengc/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/add-two-numbers/solution/hua-jie-suan-fa-2-liang-shu-xiang-jia-by-guanpengc/</a></p><p>将两个链表看成是相同长度的进行遍历，如果一个链表较短则在前面补 000，比如 987 + 23 = 987 + 023 = 1010</p><p>每一位计算的同时需要考虑上一位的进位问题，而当前位计算结束后同样需要更新进位值</p><p>如果两个链表全部遍历完毕后，进位值为 1，则在新链表最前方添加节点 1</p><p>小技巧：对于链表问题，返回结果为头结点时，通常需要先初始化一个预先指针 pre，该指针的下一个节点指向真正的头结点head。使用预先指针的目的在于链表初始化时无可用节点值，而且链表构造过程需要指针移动，进而会导致头指针丢失，无法返回结果。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Definition for singly-linked list. * public class ListNode { *     int val; *     ListNode next; *     ListNode(int x) { val = x; } * } */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode l1<span class="token punctuation">,</span> ListNode l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ListNode cur <span class="token operator">=</span> pre<span class="token punctuation">;</span>        <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null <span class="token operator">||</span> l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> l1 <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> l2 <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">;</span>            carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            sum <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> null<span class="token punctuation">)</span>                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">!=</span> null<span class="token punctuation">)</span>                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.两数之和</title>
      <link href="/2020/01/17/leetcode1/"/>
      <url>/2020/01/17/leetcode1/</url>
      
        <content type="html"><![CDATA[<h1 id="01-两数之和"><a href="#01-两数之和" class="headerlink" title="01.两数之和"></a>01.两数之和</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p><p>示例:</p><p>给定  nums = [2, 7, 11, 15], target = 9</p><p>因为  nums[0] + nums[1] = 2 + 7 = 9<br>所以 返回 [0, 1]</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/two-sum" target="_blank" rel="noopener">https://leetcode-cn.com/problems/two-sum</a></p><h2 id="第一次提交（37ms）"><a href="#第一次提交（37ms）" class="headerlink" title="第一次提交（37ms）"></a>第一次提交（37ms）</h2><p>利用双重循环，两两相加与目标值相比较（憨憨做法）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                    result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                    result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="第二次提交（3ms）"><a href="#第二次提交（3ms）" class="headerlink" title="第二次提交（3ms）"></a>第二次提交（3ms）</h2><p>参考了评论的答案</p><p>利用哈希表，原理如下</p><p>假设 target = a+b，即 b = target - a</p><p>循环数组，判断数 a 是否存在于哈希表</p><p>如果不存在，将 a 需要的数 b 和 a 的下标作为键值对存放于哈希表中 &lt;b, a的下标&gt;</p><p>如果存在，则此时的 a 等于先前存放于哈希表中的 b ，即 a’ = b，那么只需要根据 a’ 取出 a 的下标</p><p>返回一维数组 [a的下标, a’的下标] </p><p>(大佬牛逼)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//建立哈希表</span>        HashMap<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> hash <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">return</span> result<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            hash<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>target<span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap模态框登录窗口</title>
      <link href="/2020/01/10/20200110/"/>
      <url>/2020/01/10/20200110/</url>
      
        <content type="html"><![CDATA[<h1 id="Bootstrap模态框登录窗口"><a href="#Bootstrap模态框登录窗口" class="headerlink" title="Bootstrap模态框登录窗口"></a>Bootstrap模态框登录窗口</h1><p>关于bootstrap的引用</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/2.2.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="模态框登录窗口代码"><a href="#模态框登录窗口代码" class="headerlink" title="模态框登录窗口代码"></a>模态框登录窗口代码</h2><p>先上代码</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--模态框--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal fade<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myModal<span class="token punctuation">"</span></span> <span class="token attr-name">tabindex</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>-1<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dialog<span class="token punctuation">"</span></span> <span class="token attr-name">aria-</span>         <span class="token attr-name">labelledby</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myModalLabel<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal-dialog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--模态框头部--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span> <span class="token attr-name">data-dismiss</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token entity" title="&times;">&amp;times;</span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal-title<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myModalLabel<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        欢迎登录BlackBay                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--模态框主体--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>modal-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-horizontal<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!--用户框--></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>用户名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!--密码框--></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-2 control-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>密码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>required<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!--记住密码--></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-offset-2 col-sm-10<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>                                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>记住密码                                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token comment" spellcheck="true">&lt;!--登录按钮--></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-sm-offset-2 col-sm-10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-default<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="详细内容"><a href="#详细内容" class="headerlink" title="详细内容"></a>详细内容</h2><h3 id="modal"><a href="#modal" class="headerlink" title=".modal"></a>.modal</h3><pre><code> 用来把&lt;div&gt;的内容识别为模态框</code></pre><h3 id="fade"><a href="#fade" class="headerlink" title=".fade"></a>.fade</h3><p>​    当模态框切换时，它会引起内容淡入淡出</p><h3 id="tabindex"><a href="#tabindex" class="headerlink" title="tabindex"></a>tabindex</h3><ul><li>tabindex = -1：该元素无法用tab键获取焦点。用js，jq等获取可以，按tab键将会跳过这个<div></li><li>tabindex = 0：该元素可以用tab键获取焦点，且访问顺序是按照元素在文档中的顺序来的</li><li>tabindex = X (X  &gt;= 1)：该元素可以用tab键获取焦点，优先级大于tabindex = 0，且X越小，越先定位到</li></ul><h3 id="role-“dialog”"><a href="#role-“dialog”" class="headerlink" title="role = “dialog”"></a>role = “dialog”</h3><p>​    指定模态框为对话框</p><h3 id="aria-labelledby-”myModalLabel”"><a href="#aria-labelledby-”myModalLabel”" class="headerlink" title="aria-labelledby=”myModalLabel”"></a>aria-labelledby=”myModalLabel”</h3><p>​    该属性引用模态框的标题</p><p><strong>aria-hidden=”true”</strong> </p><p>​    用于保持模态窗口不可见，直到触发器被触发为止（点击按钮或连接）</p><h3 id="modal-header"><a href="#modal-header" class="headerlink" title=".modal-header"></a>.modal-header</h3><p>​    为模态框的头部定义样式</p><h3 id="modal-body"><a href="#modal-body" class="headerlink" title=".modal-body"></a>.modal-body</h3><p>​    为模态框的主题设置样式</p><h3 id="form-horizontal"><a href="#form-horizontal" class="headerlink" title=".form-horizontal"></a>.form-horizontal</h3><ul><li>设置表单控件padding和margin值</li><li>改变.form-group的表现形式，类似于网格系统的row</li></ul><h3 id="form-group"><a href="#form-group" class="headerlink" title=".form-group"></a>.form-group</h3><p>​    增加盒子的下边界</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决“There is no locally stored library”的方法</title>
      <link href="/2020/01/07/20200107/"/>
      <url>/2020/01/07/20200107/</url>
      
        <content type="html"><![CDATA[<h1 id="解决“There-is-no-locally-stored-library”的方法"><a href="#解决“There-is-no-locally-stored-library”的方法" class="headerlink" title="解决“There is no locally stored library”的方法"></a>解决“There is no locally stored library”的方法</h1><pre><code>&lt;script src=&quot;https://cdn.bootcss.com/jquery/2.2.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>用WebStorm进行前端开发时，导入此代码时发生错误，无法读取文件，报错“There is no locally stored library”</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>当鼠标停留在报错语句上时，按Alt + Enter，会出现解决方法，下载library到本地即可</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 错误解决 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
